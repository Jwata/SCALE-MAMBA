from random import random

sfloat.vlen = 15   # Length of mantissa in bits
sfloat.plen = 10   # Length of exponent in bits
sfloat.kappa = 4   # Statistical security parameter for floats

vector_length = 3
value_type = sfloat

def inner_product(x, y, l):
    # TODO: make sure that both vectors are same Length

    z = sfloat.Array(l)

    # TODO: vectorize arrays
    for i in range(l):
        z[i] = x[i] * y[i]

    p = sfloat(0)

    for i in range(l):
        p += z[i]

    return p

def get_random_vector(vector_length):
    v = value_type.Array(vector_length)

    for i in range(vector_length):
        v[i] = value_type(random())

    return v

def test_prog():
    x = get_random_vector(vector_length)
    y = get_random_vector(vector_length)
    # x = value_type.Array(vector_length)
    # x[0] = sfloat(0.1)
    # x[1] = sfloat(0.2)
    # x[2] = sfloat(0.3)
    # y = value_type.Array(vector_length)
    # y[0] = sfloat(0.1)
    # y[1] = sfloat(0.2)
    # y[2] = sfloat(0.3)

    p = inner_product(x, y, vector_length)

    print_str("inner_product(x, y) = ")
    print_ln("%s", p.reveal())

    # TODO: write result to a file

def iter_test(cnd):
    test_prog()
    cnd -= 1
    return cnd

def main():
    start_timer(1)
    do_loop(100, iter_test)
    stop_timer(1)

def preprocess():
    open_channel(0)
    a = sint.get_private_input_from(0,0)
    b = a * a
    print_ln("b is: %s", b.reveal())
    close_channel(0)
    print_ln("+++++++++++++++")

preprocess()
main()
