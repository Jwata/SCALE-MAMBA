import time
import random

# value_type = sfloat
# sfloat.vlen = 15   # Length of mantissa in bits
# sfloat.plen = 10   # Length of exponent in bits
# sfloat.kappa = 4   # Statistical security parameter for floats

value_type = sfix

vector_length = 100

def inner_product(x, y, l):
    # TODO: make sure that both vectors are same Length

    z = value_type.Array(l)

    # TODO: vectorize arrays
    for i in range(l):
        z[i] = x[i] * y[i]

    p = value_type(0)

    for j in range(l):
        p += z[j]

    return p

def get_random_vector(vector_length):
    v = value_type.Array(vector_length)

    for i in range(vector_length):
        # NOTE: it seems random variables are generated at compilation and reused in loop
        v[i] = value_type(random.randint(0, 10**10))
        print_ln("%s", v[i].reveal())

    return v

def test_prog():
    x = get_random_vector(vector_length)
    y = get_random_vector(vector_length)

    p = inner_product(x, y, vector_length)

    print_str("inner_product(x, y) = ")
    print_ln("%s", p.reveal())

    # TODO: write result to a file

def iter_test(cnd):
    test_prog()
    cnd -= 1
    return cnd

def main():
    start_timer(1)
    do_loop(10, iter_test)
    stop_timer(1)

def preprocess():
    random.seed(time.time())

    open_channel(0)
    a = sint.get_private_input_from(0,0)
    b = a * a
    print_ln("b is: %s", b.reveal())
    close_channel(0)
    print_ln("+++++++++++++++")

preprocess()
main()
